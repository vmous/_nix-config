############################## 'ls' family ######################################
# The above assumes you use a recent version of GNU ls
alias ll="ls -l"
alias ls='ls -hFG'         # add colors for filetype recognition
alias la='ls -Al'          # show hidden files
alias lx='ls -lXB'         # sort by extension
alias lk='ls -lSr'         # sort by size, biggest last
alias lc='ls -ltcr'        # sort by and show change time, most recent last
alias lu='ls -ltur'        # sort by and show access time, most recent last
alias lt='ls -ltr'         # sort by date, most recent last
alias lr='ls -lR'          # recursive ls
alias tree='tree -Csu'     # nice alternative to 'recursive ls'

############################## other ############################################
alias c='clear'
alias e='emacs'
alias h='history'
alias l='less'
alias ups='ps axo pid,user,args'
alias aps='ps axo pid,ppid,user,pcpu,vsz,etime,args'
alias ptree='pstree -ap'
alias rw='rename_window'
alias sdr='screen -d -r'
#alias j-last='last | cut -f1 -d' ' | sort | uniq -c | sort -k1gr'
alias rgrep='grep -RnsI'
function rfind {
  if [[ ! $# -eq 2 ]]; then
    echo "Usage: $0 <dir> <regex>"
  else
    find "$1" -follow -name "$2"
  fi
}
alias du-hog-f='du -h . | sort -nr | head -n10'
alias du-hog-d='du -hs * | sort -nr | head -n10'
alias pgrep='pgrep -fl'
alias j-listeners='sudo lsof -PiTCP -sTCP:LISTEN'
alias simpleserver='python -m SimpleHTTPServer'

function j-tmux() {
  cmd_exists tmux || { echo >&2 "Cannot find tmux. Aborting."; return; }

  local _legal=true
  if [[ $# -eq 0 ]]; then
    tmux ls
  elif [[ $# -eq 1 ]]; then
    tmux attach -t "$1"
  elif [[ $1 = "n" ]] && [[ ! -z "$2" ]]; then
    tmux new -s "$2"
  elif [[ $1 = "a" ]] && [[ ! -z "$2" ]]; then
    tmux attach -t "$2"
  elif [[ $1 = "r" ]] && [[ ! -z "$2" ]]; then
    # Attach to a tmux session and make sure you refresh ssh-agent forwarding
    # on each window.
    # Note: this part requires all windows are "waiting" on shell prompt. If a
    # window is running a programm the keys below will be received by the
    # program.
    local _session="$2"
    for _window in $(tmux list-windows -t "$2" -F '#I'); do
      # clear prompt before
      tmux send-keys -t ${_session}:${_window} "C-c"
      tmux send-keys -t ${_session}:${_window} "export $(tmux show-environment | grep "^SSH_AUTH_SOCK")" ENTER
    done
    tmux attach -t "$2"
  else
    _legal=false
  fi

  if [ "$_legal" = false ]; then
    echo "Illegal use of jtmux. Try:"
    echo "Example: $0 [n|a|r|] <session_name>"
  fi
}

function j-del-line-in-file {
  if [ $# -ne 2 ]; then
    echo "Please provide the line an the file you wish to delete."
    echo "Example: $0 <line> <file>"
    return 1
  fi

  local _line=$1
  local _file=$2
  if ! is_unsigned_integer "${_line}"; then
    echo "ERROR: <line> (first argument) must be a positive integer."
    return 1
  fi

  if ! is_text_file "${_file}"; then
    echo "ERROR: <file> (second argument) must be an existing, text file."
    return 1
  fi

  echo "${_file}:${_line}: " $(sed -n "${_line}"p "${_file}")

  if [[ $(yes_or_no "Do you want to delete the above line?") == "y" ]]; then
      $(backup_file "${_file}")
      if [[ ${JMACHINE} == "mac" ]]; then
        $(sed -i "" ${_line}'d' ${_file})
      else
        $(sed -i ${_line}'d' ${_file})
      fi
  fi
}
