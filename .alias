#-------------------------------------------------------------
# The 'ls' family (this assumes you use a recent GNU ls)
#-------------------------------------------------------------
alias ll="ls -l"
alias ls='ls -hFG'         # add colors for filetype recognition
alias la='ls -Al'          # show hidden files
alias lx='ls -lXB'         # sort by extension
alias lk='ls -lSr'         # sort by size, biggest last
alias lc='ls -ltcr'        # sort by and show change time, most recent last
alias lu='ls -ltur'        # sort by and show access time, most recent last
alias lt='ls -ltr'         # sort by date, most recent last
alias lr='ls -lR'          # recursive ls
alias tree='tree -Csu'     # nice alternative to 'recursive ls'

#-------------------------------------------------------------
# Misc.
#-------------------------------------------------------------
alias c='clear'
alias e='emacs'
alias h='history'
alias l='less'
alias ups='ps axo pid,user,args'
alias aps='ps axo pid,ppid,user,pcpu,vsz,etime,args'
alias ptree='pstree -ap'
alias rw='rename_window'
#alias jlast='last | cut -f1 -d' ' | sort | uniq -c | sort -k1gr'
alias rgrep='grep -RnsI'
alias sdr='screen -d -r'
function_jtmux() {
  command -v tmux >/dev/null 2>&1 || { echo >&2 "Cannot find tmux. Aborting."; return; }

  local _legal=true
  if [ $# -eq 0 ]; then
    tmux ls
  elif [ $# -eq 1 ]; then
    tmux attach -t "$1"
  elif [ $1 = "n" ] && [ ! -z "$2" ]; then
    tmux new -s "$2"
  elif [ $1 = "a" ] && [ ! -z "$2" ]; then
    tmux attach -t "$2"
  elif [ $1 = "r" ] && [ ! -z "$2" ]; then
    # Attach to a tmux session and make sure you refresh ssh-agent forwarding
    # on each window.
    # Note: this part requires all windows are "waiting" on shell prompt. If a
    # window is running a programm the keys below will be received by the
    # program.
    local _session="$2"
    for _window in $(tmux list-windows -t "$2" -F '#I'); do
      # clear prompt before
      tmux send-keys -t ${_session}:${_window} "C-c"
      tmux send-keys -t ${_session}:${_window} "export $(tmux show-environment | grep "^SSH_AUTH_SOCK")" ENTER
    done
    tmux attach -t "$2"
  else
    _legal=false
  fi

  if [ "$_legal" = false ]; then
    echo "Illegal use of jtmux. Try:"
    echo "tmux [n|a|r|] <session>"
  fi
}
alias jtmux=function_jtmux

# 
alias du-hog-f='du -h . | sort -nr | head -n10'
alias du-hog-d='du -hs * | sort -nr | head -n10'

alias simpleserver='python -m SimpleHTTPServer'

#-------------------------------------------------------------
# AUTHENTICATION
#-------------------------------------------------------------
function_yubikey() {
  if mwinit; then
    ssh-add -D ~/.ssh/*_rsa
    ssh-add ~/.ssh/*_rsa
  else
    echo "Failed to authenticate."
    exit 1
  fi
}
alias j-yubikey=function_yubikey

#-------------------------------------------------------------
# BRAZIL
#-------------------------------------------------------------
alias jj2bw='cd /workplace/vmous/'

alias jbw='brazil ws'
alias jbwc='jbw --create'
alias jbwd='jbw --delete'
alias jbws='jbw --show'
alias jbwsm='jbw --sync --md'
alias jbwu='jbw --use'
alias jbwr='jbw --remove'
alias jbwea='jbw attachenvironment --alias'
alias jbwed='brazil ws detachenvironment --alias'
alias jbwc-a9='jbwc -vs A9Search/main'
alias jbwc-a9-meta='jbwc -vs A9Search/QueryConfigRelease-certified'
alias jbwc-bdm-predict='jbwc -vs A9SearchBDMPredictionBuild/release'

alias jbb='brazil-build'
alias bb='jbb'
alias jbbc='brazil-build clean'
alias jbbt='brazil-build test'
alias jbbtv='brazil-build test-valgrind'
alias jbba='brazil-build apollo-pkg'
alias jbbr='brazil-build release'
alias jbb-cbtr='jbbc 2>&1 | tee clean.log && jbb 2>&1 | tee build.log && jbbt 2>&1 | tee test.log && jbbr 2>&1 | tee release.log'

alias jbrc='brazil-recursive-cmd'
alias jbrc-all='jbrc --allPackages'

alias jbrcp='brazil-recursive-cmd-parallel -j 8'
alias jbrcp-all='jbrcp --allPackages'

alias jbre='brazil-runtime-exec'

alias SHUTUP='export MAKE_OUTPUT_LEVEL=QUIET'

#-------------------------------------------------------------
# APOLLO
#-------------------------------------------------------------
# useful inside the apollo symlink farms
alias fresh='cd $PWD'

alias jawdb='watch -t '\''ls -drt /apollo/var/logs/apollo-update* | xargs tail | strings | fold -w $COLUMNS | tail -n $LINES'\'''
alias jaghc='/apollo/bin/getmyhostclass'
alias jahc='/apollo/env/ApolloCommandLine/bin/apolloHostControlCLI --print'
alias jaea='sudo /apollo/bin/runCommand -a Activate -e'
alias jaed='sudo /apollo/bin/runCommand -a Deactivate -e'

#-------------------------------------------------------------
# AMAZON TOOLS
#-------------------------------------------------------------
# alternative: /apollo/bin/env -e SDETools /apollo/env/SDETools/bin/curl --url %s -k --negotiate -u :
alias jcurl='/apollo/bin/env -e SDETools /apollo/env/SDETools/bin/curl --anyauth --location-trusted -u: -c /tmp/cookies.txt -b /tmp/cookies.txt -k'
alias j-aws-rel-odin='export AWS_CREDENTIALS_ODIN=com.a9.relevance.common.aws'
alias j-aws-relcon-ro='/apollo/bin/env -e envImprovement aws-console-access com.a9.relevance.common.aws --with-read-only'
alias j-aws-relcon-power='/apollo/bin/env -e envImprovement aws-console-access com.a9.relevance.common.aws --with-power-user'
alias j-aws-relcon-admin='/apollo/bin/env -e envImprovement aws-console-access com.a9.relevance.common.aws --with-admin'

#-------------------------------------------------------------
# HADOOP/SPARK TOOLS
#-------------------------------------------------------------
alias jssh_tunnel_fresca='ssh -N -D 2600 -f security-bastions-prod-iad.amazon.com -o ServerAliveInterval=60'
alias jssh_tunnel_spark_gamma='ssh -i ~/emr-gamma -N -D 8157 hadoop@ec2-54-147-186-124.compute-1.amazonaws.com -o ServerAliveInterval=60'
function_jscp_ship_spark_gamma() {
  local _source_jar="./build/Scala2.11/*.jar"
  local _target_dir="hadoop@ec2-54-147-186-124.compute-1.amazonaws.com:/mnt/user/vmous/"
  if [ ! $# -eq 0 ]; then
    if [ $1 = "jarjar" ]; then
      _source_jar="./build/assembly/*.uber.jar"
    else
      echo "Cannot understand $1. Aborting"
      return
    fi
  fi
  local _cmd="/usr/bin/scp -i ~/emr-gamma ${_source_jar} ${_target_dir}"
  echo "Executing: ${_cmd}"
  eval ${_cmd}

}
alias jscp_ship_spark_gamma=function_jscp_ship_spark_gamma
