[user]
	name = Vassilis S. Moustakas
	email = vsmoustakas@gmail.com
[core]
	editor = emacs -nw
	pager = less -FMRiX
[color]
	ui = auto
[commit]
	template = ~/.git-commit-template
[pull]
        rebase = true
[merge]
        ff = only
[push]
	default = simple
[alias]
        # branch
	br = branch
        br-pav = branch -v -a # print available
        # checkout
        co = checkout
        # commit
        ci = commit
        # diff
	df = diff --name-only # only filenames
        dfa = diff
	dfc = diff --cached
        df-br = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative
        # log
	llog = log --oneline @{upstream}..HEAD
	llp = log -p @{upstream}..HEAD
	lldag = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
        lldag2 = log --graph --format='format:%C(yellow)%h%C(reset) %C(blue)\"%an\" <%ae>%C(reset) %C(magenta)%cr%C(reset)%C(auto)%d%C(reset)%n%s' --date-order
        # remote
        rls = remote -v
        # status
        st = status
        # misc.
        alias = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\ \t => \\2/' | sort
        untrack = rm --cache --

        ##### Workflows #####

        # "Squash" all local commits into the first local commit reusing first
        # commit's message.
        j-squash-to-first-local = "!f() { \
               UPSTREAM=$(git rev-parse --abbrev-ref --symbolic-full-name @{u} 2>/dev/null || echo origin/HEAD) && \
               LAST_REMOTE_ID=$(git merge-base \"${UPSTREAM}\" HEAD) && \
               FIRST_LOCAL_ID=$(git rev-list --reverse "${LAST_REMOTE_ID}"..HEAD | head -n 1) && \
               FIRST_LOCAL_MSG=$(git log -1 --format=%B "${FIRST_LOCAL_ID}") && \
               git reset --soft \"${LAST_REMOTE_ID}\" && \
               git commit -m \"${FIRST_LOCAL_MSG}\"; \
        }; f"

        # Merge all uncommited (new, staged and unstaged) files of your working
        # directory into the last local commit. Do this only if at least one
        # local-only commit exists.
        j-uncommited-to-last-local = "!f() { \
               UPSTREAM=$(git rev-parse --abbrev-ref --symbolic-full-name @{u} 2>/dev/null || echo origin/HEAD) && \
               LAST_REMOTE_ID=$(git merge-base \"${UPSTREAM}\" HEAD) && \
               LOCAL_COUNT=$(git rev-list --count \"${LAST_REMOTE_ID}\"..HEAD); \
               if [ \"$LOCAL_COUNT\" -eq 0 ]; then echo 'There are no local commits to merge uncommited changes into. Aborting...'; exit 1; fi; \
               LAST_LOCAL_MSG=$(git log -1 --format=%B); \
               git add -A && \
               git commit --amend --no-edit; \
        }; f"

        j-restore-all-but = "!bash -c 'source \"${HOME}/.gitconfig-aliases.sh\" && git_j_restore_all_but \"$@\"' --"


[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
