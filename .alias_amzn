############################## authentication ###################################
function j-yubikey {
  # https://w.amazon.com/index.php/NextGenMidway/UserGuide#If_you_need_to_SSH_to_hosts_or_execute_scripts_with_Midway_auth
  if test `find ~/.ssh/id_rsa-cert.pub -mmin +1220`; then
    if mwinit; then
      ssh-add -D ~/.ssh/*_rsa
      ssh-add ~/.ssh/*_rsa
    else
      echo "Failed to authenticate."
      exit 1
    fi
  fi
}

############################## brazil ###########################################
alias j-bw='cd /workplace/vmous/'

alias j-bw='brazil ws'
alias j-bwc='j-bw --create'
alias j-bwd='j-bw --delete'
alias j-bwdr='j-bw --dryrun'
alias j-bwdru='j-bwdr --unoptimized'
alias j-bws='j-bw --show'
alias j-bwsm='j-bw --sync --md'
alias j-bwu='j-bw --use'
alias j-bwr='j-bw --remove'
alias j-bwea='j-bw attachenvironment --alias'
alias j-bwed='j-bw detachenvironment --alias'
alias j-bwc-a9='j-bwc -vs A9Search/main'
alias j-bwc-a9-meta='j-bwc -vs A9Search/QueryConfigRelease-certified'
alias j-bwc-bdm-bucketer='j-bwc -vs A9SearchBDMBucketBuilder/release'
alias j-bwc-bdm-predict='j-bwc -vs A9SearchBDMPredictionBuild/release'
alias j-bwc-rsas='j-bwc -vs RemoteSearchAggregator/release'
alias j-bwc-bdm-predict-container-build='j-bwc -vs A9SearchBDMPredictionBuild/container-build'

alias j-bpc='brazil-package-cache'
alias j-bpcd='j-bpc disable_edge_cache'
alias j-bpce='j-bpc enable_edge_cache'
alias j-bpcs='j-bpc start'
alias j-bpcr='j-bpcd && j-bpce && j-bpcs'

alias j-bb='brazil-build'
alias bb='j-bb'
alias j-bbb='j-bb build'
alias j-bbc='j-bb clean'
alias j-bbt='j-bb test'
alias j-bbtv='j-bb test-valgrind'
alias j-bba='j-bb apollo-pkg'
alias j-bbr='j-bb release'
alias j-bb-ensime='j-bb scala-dev-init'
alias j-bb-cbtr='j-bbc 2>&1 | tee clean.log && j-bb 2>&1 | tee build.log && j-bbt 2>&1 | tee test.log && j-bbr 2>&1 | tee release.log'

alias j-brc='brazil-recursive-cmd'
alias j-brc-all='j-brc --allPackages'

alias j-brcp='brazil-recursive-cmd-parallel -j 8'
alias j-brcp-all='j-brcp --allPackages'

alias j-bre='brazil-runtime-exec'

alias SHUTUP='export MAKE_OUTPUT_LEVEL=QUIET'

############################## apollo ###########################################
alias j-afresh='cd $PWD' # useful inside the Apollo symlink farms
# watch build deployment
alias j-awbd='watch -t '\''ls -drt /apollo/var/logs/apollo-update* | xargs tail | strings | fold -w $COLUMNS | tail -n $LINES'\'''
# get host class
alias j-aghc='/apollo/bin/getmyhostclass'
# host control
alias j-ahc='/apollo/env/ApolloCommandLine/bin/apolloHostControlCLI'
# environment activate
alias j-aea='sudo /apollo/bin/runCommand -a Activate -e'
# environment de-activate
alias j-aed='sudo /apollo/bin/runCommand -a Deactivate -e'

############################## a9 ###############################################
#
# Laguna
#
alias j-laguna='/apollo/bin/env -e Laguna-Client laguna_emr'
alias j-laguna-ls='j-laguna list-clusters'
alias j-laguna-create='j-laguna create-cluster -c'
function j-laguna-create-jazzy {
    local CLUSTER_NAME=$1; shift
    j-laguna create-cluster -c ${CLUSTER_NAME} -i 4 -m r3.2xlarge -s c3.2xlarge --emr-version emr-5.8.0 --extend-idle-cluster-period $*
}
alias j-laguna-terminate='j-laguna terminate-cluster -c'
alias j-laguna-ssh='j-laguna connect-cluster -c'
alias j-laguna-sftp='j-laguna sftp-cluster -c'
function j-laguna-ssh-build {
  if [ $# -eq 0 ]; then
    echo "Please provide the Master Node hostname or DNS alias."
    echo "Example: $0 <master_node>"
    return
  fi

  local MASTER_NODE=$1; shift
  local CMD="ssh -i ~/.ssh/laguna-ec2key.pem ec2-user@${MASTER_NODE} $*"
  eval ${CMD}
}

#
# Fresca
#
alias j-fresca-tunnel='ssh -N -D 2600 -f security-bastions-prod-iad.amazon.com -o ServerAliveInterval=60'
alias j-fresca-tunnel-spark-gamma='ssh -N -D 8157 -f -i ~/emr-gamma hadoop@ec2-54-147-186-124.compute-1.amazonaws.com -o ServerAliveInterval=60'

function j-fresca-spark-gamma-ship() {
  local _source_jar="./build/Scala2.11/*.jar"
  local _target_dir="hadoop@ec2-54-147-186-124.compute-1.amazonaws.com:/mnt/user/vmous/"
  if [ ! $# -eq 0 ]; then
    if [ $1 = "jarjar" ]; then
      _source_jar="./build/assembly/*.uber.jar"
    else
      echo "Cannot understand $1. Aborting"
      return
    fi
  fi
  local _cmd="/usr/bin/scp -i ~/emr-gamma ${_source_jar} ${_target_dir}"
  echo "Executing: ${_cmd}"
  eval ${_cmd}
}

############################## aws ##############################################
#
# AWS Odin Credentials
#
alias j-aws-o-laguna='export AWS_CREDENTIALS_ODIN=com.amazon.access.a9-search-relevance-laguna-dev-1'
alias j-aws-o-rel='export AWS_CREDENTIALS_ODIN=com.a9.relevance.common.aws'
alias j-aws-o-anal-qnrmuc='export AWS_CREDENTIALS_ODIN=com.amazon.access.search-analytics-search-qnr-muc-1'
#
# AWS Console Access
#

# can add `--with-admin`, `--with-read-only` or `--with-power-user`
alias j-aws-c-rel='open $(=ssh vmous.aka.corp.amazon.com /apollo/bin/env -e envImprovement aws-console-access com.a9.relevance.common.aws --with-admin)'
#alias j-aws-c-infra='open $(=ssh vmous.aka.corp.amazon.com /apollo/bin/env -e envImprovement aws-console-access ec2-a9-search-infra-account --with-admin)'

#
# AWS EC2
#
alias j-aws-p2-start='j-aws-o-rel && /apollo/env/AmazonAwsCli/bin/aws --region us-east-1 ec2 start-instances --instance-ids i-0cec0591dbada1c76'

#
# AWS S3
#

# Workaround for https://github.com/aws/aws-cli/pull/1122
function j-aws-s3-multipart-workaround {
  if [[ ${#} -ne 1 ]]; then
    echo "Please provide the threshold"
    echo "Example: $0 <threshold>"
    echo "where <threshold> is a threshold in bytes (e.g., 521MB or 1GB)"
    return
  fi

  local THRESHOLD=${1}
  local CMD="/apollo/env/AmazonAwsCli/bin/aws configure set s3.multipart_threshold ${THRESHOLD}"

  eval ${CMD}
}

function j-aws-s3-get {
  local USAGE="Usage: $0 <krypt|kms> <link>,\nwhere <enc> can be either \"krypt\" or \"kms\" and <link> is the link provided in the S3 object's overviwe console page (e.g. 'https://s3.amazonaws.com/<bucket>/<key>')"

  if [[ ${#} -ne 2 ]]; then
    echo "Wrong number of arguments."
    echo ${USAGE}
    return
  fi

  local ENC=""
  if [[ "${1}" = "krypt" ]]; then
    # nothing to do
  elif [[ "${1}" = "kms" ]]; then
    ENC="-k us-east-1 -e KMS -m \"dcda7203-d69b-4014-a560-377f9bbd3b5f\""
  else
    echo "Unsupported encoding argument \"${1}\"."
    echo ${USAGE}
    return
  fi

  local URL=${2}
  local ENDPOINT="$(echo ${URL} | sed -e's,^\(https://s3.amazonaws.com/\).*,\1,g')"
  URL=$(echo ${URL} | sed -e s,${ENDPOINT},,g)
  local BUCKET="$(echo ${URL} | sed -e's,^\([^/]*\).*,\1,g')"
  URL=$(echo ${URL} | sed -e s,${BUCKET},,g)
  local KEY=$(echo ${URL} | sed -e s,^/,,g)
  local FILE=$(echo ${KEY} | sed -e s,/,.,g)

  local CMD="s3GetEncrypted -b ${BUCKET} -o ${KEY} ${ENC} -c com.a9.relevance.common.aws --region us-east-1 --endpoint s3.amazonaws.com > ${FILE}"

  #  s3GetEncrypted -b a9-behavior-driven-matching-alpha -o projects/bdm/prediction/input-xdf-features/eu/eu-kitchen-in.csv -k us-east-1 -c com.a9.relevance.common.aws -m com.a9.relevance.common.crypt_keypair > 20170717_eu-kitchen-in.csv

  # 3GetEncrypted --bucket a9-behavior-driven-matching-prod --object=projects/bdm/widget/${REGION}/low-precision-${MID}.tsv --credential=com.a9.relevance.common.aws low-precision-${MID}.tsv

  echo "Executing: ${CMD}"
  eval ${CMD}
}

#
# AWS EMR
#
function j-aws-emr-tunnel-laguna {
  if [ $# -eq 0 ]; then
    echo "Please provide the master node public DNS."
    echo "Example: $0 <master_node>"
    return
  fi

  local _ssh_cmd="ssh -i ~/.ssh/laguna-ec2key.pem -ND 8157 hadoop@${1} &"
  eval ${_ssh_cmd}
}

function j-aws-emr-webuis-laguna {
  if [ $# -eq 0 ]; then
    echo "Please provide the master node public DNS."
    echo "Example: $0 <masternode public DNS>"
    return
  fi

  j-aws-emr-tunnel-laguna ${1}
  local _sleep_secs="sleep 2"
  eval ${_sleep_secs}

  echo "---------------------------------------------"
  echo "| Interface             | URI"
  echo "---------------------------------------------"
  echo "| Yarn Resource Manager | http://$1:8088";
  open http://$1:8088
  #echo "| Yarn Node Manager     | http://<slave-public-dns-name>:8042"
  echo "| Hadoop HDFS NameNode  | http://$1:50070";
  open http://$1:50070
  #echo "| Hadoop HDFS DataNode  | http://<slave-public-dns-name>:50075"
  echo "| Spark HistoryServer   | http://$1:18080";
  open http://$1:18080
  echo "| Zeppellin             | http://$1:8890";
  open http://$1:8890
  echo "| Jupiter               | http://$1:8880";
  open http://$1:8880
  #echo "| Hue                   | http://$1:8888";
  #open http://$1:8888
  echo "| Ganglia               | http://$1/ganglia/";
  open http://$1/ganglia/
  #echo "| HBase UI              | http://$1:16010";
  #open http://$1:16010
}

############################## other ############################################
alias j-ssh-bdm-submit-gamma='ssh bdm-submit-gamma-1a-efebe8a2.us-east-1.amazon.com'
alias j-ssh-bdm-submit-prod='ssh bdm-submit-prod-1a-8b6e7e85.us-east-1.amazon.com'

############################## misc. ############################################
if [[ "${JMACHINE}" == "worklinux" ]]; then
  # alternative: /apollo/bin/env -e SDETools /apollo/env/SDETools/bin/curl --url %s -k --negotiate -u :
  alias curl_sdetools='/apollo/bin/env -e SDETools /apollo/env/SDETools/bin/curl --anyauth --location-trusted -u: -c /tmp/cookies.txt -b /tmp/cookies.txt -k'
fi
